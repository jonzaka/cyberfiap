name: DAST - ZAP Baseline Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  actions: write

jobs:
  zap-baseline:
    name: ZAP Baseline (DAST)
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Executa o ZAP Baseline com saída em JSON/MD/HTML.
      # Marcado como continue-on-error para não "quebrar" o job se o ZAP retornar exit code 2 (warnings).
      - name: Run ZAP Baseline
        id: zap
        uses: zaproxy/action-baseline@v0.12.0
        continue-on-error: true
        with:
          target: http://testphp.vulnweb.com
          cmd_options: -a -j
          docker_name: ghcr.io/zaproxy/zaproxy:stable
          allow_issue_writing: false
          # não dependemos do upload interno do action (estava falhando), faremos upload manual abaixo
        env:
          # se um dia precisar autenticação por header:
          # ZAP_AUTH_HEADER: X-Auth-Token
          # ZAP_AUTH_HEADER_VALUE: ${{ secrets.ZAP_AUTH_TOKEN }}
          # ZAP_AUTH_HEADER_SITE: testphp.vulnweb.com
          TZ: UTC

      # Os arquivos são criados no workspace pela action anterior:
      # report_json.json, report_md.md, report_html.html
      - name: List generated reports
        run: |
          ls -la
          ls -la report_* || true

      - name: Upload ZAP reports (HTML/JSON/MD)
        uses: actions/upload-artifact@v4
        with:
          name: zapreport-${{ github.run_id }}
          path: |
            report_html.html
            report_json.json
            report_md.md
          overwrite: true
          if-no-files-found: warn

      # Opcional: se quiser forçar o job como sucesso mesmo se o step do ZAP tiver saído com erro.
      - name: Mark job successful (always)
        if: always()
        run: echo "Done ✅"
